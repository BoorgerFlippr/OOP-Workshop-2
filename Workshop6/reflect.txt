* Glenn Parreno
* geparreno@myseneca.ca
* 115814196
* 05 / 11 / 22


	This workshop I found to be okay. I think it indtroduces the idea of STL containers very well. I was surprised how easy it was to resize and array of objects is using vectors compared to a standard dynamic array like in the previous workshops. One of the difficulties I had with this workshop is at the createInstance function. I had to rework it multiple times to create a working workshop since I had a hard time working with the recieved istream& parameter. Somehow knowing what the tag of the stream is (e.g. v for van, c for car) was difficult for me. But looking at the internet for example of using stringstream effectively did help. Trial and error did as well. Displaying the the topSpeed while also having the booster applied was hard. I had no idea how to match that ouput for the racecar object. Having no more ideas I created a setSpeed function in the car module. That function applies the booster to the topSpeed. I listed it under "protected" to ensure only child classes of Car can use it.

	The reason why we deallocate memory in the vector is to prevent memory leaks. In the case of this workshop, the vector is filled with data of type Vehicle*. All of its instances are dynamically created pointers. Ususally vectors deallocates memory automatically when it goes out of scope but no in the case of this workshop.

	The way for the function loadData to detect if there is something wrong with the record is to transfer some of the lopgic in the Utilities module into that function. In my createInstance() function I have code that validates the first token to determine the type of vehicle. In the line 24 to 27 is: 
		idx = str.find_first_not_of(' '); 
		ch = str[0];
		if (ch == ' ')
			ch = str[idx];
	  it ensures that when reading the istream it finds a letter that could represent a vehicle and not just space. If these logic were to be transfered from the utilities module to the loadData function it could handle potentially bad data.

	In this workshop I think I could have used a list for m_Vehicles instead of vectors. They have mostly similar functionalities. However, since this workshop did not need to randomly access memory is the reason why I think this substitution is possible. Random memory access is not possible in lists unike in vectors.